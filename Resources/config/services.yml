imports:
    - { resource: 'services_types.yml'}

services:
#    tech_promux_dynamic_query.example:
#        class: TechPromux\Bundle\DynamicQueryBundle\Example
#        arguments: ["@service_id", "plain_value", "%parameter%"]

    # Manager Services

    techpromux_dynamic_query.manager.datasource:
        class: TechPromux\Bundle\DynamicQueryBundle\Manager\DataSourceManager
        arguments: [~]
        tags:
            - { name: techpromux.entity_manager}
        calls:
            - [ setServiceContainer,['@service_container']]
            - [ setDynamicQueryUtilManager,['@techpromux_dynamic_query.manager.dynamic_query_util']]

    techpromux_dynamic_query.manager.metadata:
        class: TechPromux\Bundle\DynamicQueryBundle\Manager\MetadataManager
        arguments: [~]
        tags:
            - { name: techpromux.entity_manager}
        calls:
            - [ setServiceContainer,['@service_container']]
            - [ setDynamicQueryUtilManager,['@techpromux_dynamic_query.manager.dynamic_query_util']]

    techpromux_dynamic_query.manager.metadata_table:
        class: TechPromux\Bundle\DynamicQueryBundle\Manager\MetadataTableManager
        arguments: [~]
        tags:
            - { name: techpromux.entity_manager}
        calls:
            - [ setServiceContainer,['@service_container']]
            - [ setMetadataManager,['@techpromux_dynamic_query.manager.metadata']]

    techpromux_dynamic_query.manager.metadata_relation:
        class: TechPromux\Bundle\DynamicQueryBundle\Manager\MetadataRelationManager
        arguments: [~]
        tags:
            - { name: techpromux.entity_manager}
        calls:
            - [ setServiceContainer,['@service_container']]
            - [ setMetadataManager,['@techpromux_dynamic_query.manager.metadata']]

    techpromux_dynamic_query.manager.metadata_field:
        class: TechPromux\Bundle\DynamicQueryBundle\Manager\MetadataFieldManager
        arguments: [~]
        tags:
            - { name: techpromux.entity_manager}
        calls:
            - [ setServiceContainer,['@service_container']]
            - [ setMetadataManager,['@techpromux_dynamic_query.manager.metadata']]

    techpromux_dynamic_query.manager.datamodel:
        class: TechPromux\Bundle\DynamicQueryBundle\Manager\DataModelManager
        arguments: [~]
        tags:
            - { name: techpromux.entity_manager}
        calls:
            - [ setServiceContainer,['@service_container']]
            - [ setMetadataManager,['@techpromux_dynamic_query.manager.metadata']]
            - [ setDatamodelDetailManager,['@techpromux_dynamic_query.manager.datamodel_detail']]
            - [ setDatamodelGroupManager,['@techpromux_dynamic_query.manager.datamodel_group']]
            - [ setDatamodelConditionManager,['@techpromux_dynamic_query.manager.datamodel_condition']]
            - [ setDatamodelOrderManager,['@techpromux_dynamic_query.manager.datamodel_order']]
            - [ setDynamicQueryUtilManager,['@techpromux_dynamic_query.manager.dynamic_query_util']]

    techpromux_dynamic_query.manager.datamodel_detail:
        class: TechPromux\Bundle\DynamicQueryBundle\Manager\DataModelDetailManager
        arguments: [~]
        tags:
            - { name: techpromux.entity_manager}
        calls:
            - [ setServiceContainer,['@service_container']]
            - [ setDataModelManager,['@techpromux_dynamic_query.manager.datamodel']]

    techpromux_dynamic_query.manager.datamodel_group:
        class: TechPromux\Bundle\DynamicQueryBundle\Manager\DataModelGroupManager
        arguments: [~]
        tags:
            - { name: techpromux.entity_manager}
        calls:
            - [ setServiceContainer,['@service_container']]
            - [ setDataModelManager,['@techpromux_dynamic_query.manager.datamodel']]

    techpromux_dynamic_query.manager.datamodel_condition:
        class: TechPromux\Bundle\DynamicQueryBundle\Manager\DataModelConditionManager
        arguments: [~]
        tags:
            - { name: techpromux.entity_manager}
        calls:
            - [ setServiceContainer,['@service_container']]
            - [ setDataModelManager,['@techpromux_dynamic_query.manager.datamodel']]

    techpromux_dynamic_query.manager.datamodel_order:
        class: TechPromux\Bundle\DynamicQueryBundle\Manager\DataModelOrderManager
        arguments: [~]
        tags:
            - { name: techpromux.entity_manager}
        calls:
            - [ setServiceContainer,['@service_container']]
            - [ setDataModelManager,['@techpromux_dynamic_query.manager.datamodel']]

    techpromux_dynamic_query.manager.dynamic_query_util:
        class: TechPromux\Bundle\DynamicQueryBundle\Manager\DynamicQueryUtilManager
        arguments: [~]
        tags:
            - { name: techpromux.entity_manager}
        calls:
            - [ setServiceContainer,['@service_container']]



    # Admin services

    techpromux_dynamic_query.admin.datasource:
        class: TechPromux\Bundle\DynamicQueryBundle\Admin\DataSourceAdmin
        arguments: [~, TechPromux\Bundle\DynamicQueryBundle\Entity\DataSource, TechPromuxDynamicQueryBundle:DataSourceAdmin]
        tags:
            - { name: sonata.admin, manager_type: orm, group: techpromux_dynamic_queries_admin, label: DataSource }

    techpromux_dynamic_query.admin.metadata:
        class: TechPromux\Bundle\DynamicQueryBundle\Admin\MetadataAdmin
        arguments: [~, TechPromux\Bundle\DynamicQueryBundle\Entity\Metadata, TechPromuxDynamicQueryBundle:MetadataAdmin]
        tags:
            - { name: sonata.admin, manager_type: orm, group: techpromux_dynamic_queries_admin, label: Metadata }

    techpromux_dynamic_query.admin.metadata_table:
        class: TechPromux\Bundle\DynamicQueryBundle\Admin\MetadataTableAdmin
        arguments: [~, TechPromux\Bundle\DynamicQueryBundle\Entity\MetadataTable, SonataAdminBundle:CRUD]
        tags:
            - { name: sonata.admin, manager_type: orm, group: techpromux_dynamic_queries_admin, label: Table, show_in_dashboard: false }

    techpromux_dynamic_query.admin.metadata_field:
        class: TechPromux\Bundle\DynamicQueryBundle\Admin\MetadataFieldAdmin
        arguments: [~, TechPromux\Bundle\DynamicQueryBundle\Entity\MetadataField, SonataAdminBundle:CRUD]
        tags:
            - { name: sonata.admin, manager_type: orm, group: techpromux_dynamic_queries_admin, label: Field, show_in_dashboard: false }

    techpromux_dynamic_query.admin.metadata_relation:
        class: TechPromux\Bundle\DynamicQueryBundle\Admin\MetadataRelationAdmin
        arguments: [~, TechPromux\Bundle\DynamicQueryBundle\Entity\MetadataRelation, SonataAdminBundle:CRUD]
        tags:
            - { name: sonata.admin, manager_type: orm, group: techpromux_dynamic_queries_admin, label: Relation, show_in_dashboard: false }

    techpromux_dynamic_query.admin.datamodel:
        class: TechPromux\Bundle\DynamicQueryBundle\Admin\DataModelAdmin
        arguments: [~, TechPromux\Bundle\DynamicQueryBundle\Entity\DataModel, TechPromuxDynamicQueryBundle:DataModelAdmin]
        tags:
            - { name: sonata.admin, manager_type: orm, group: techpromux_dynamic_queries_admin, label: DataModel }

    techpromux_dynamic_query.admin.datamodel_detail:
        class: TechPromux\Bundle\DynamicQueryBundle\Admin\DataModelDetailAdmin
        arguments: [~, TechPromux\Bundle\DynamicQueryBundle\Entity\DataModelDetail, SonataAdminBundle:CRUD]
        tags:
            - { name: sonata.admin, manager_type: orm, group: techpromux_dynamic_queries_admin, label: DataModelDetail, show_in_dashboard: false }

    techpromux_dynamic_query.admin.datamodel_group:
        class: TechPromux\Bundle\DynamicQueryBundle\Admin\DataModelGroupAdmin
        arguments: [~, TechPromux\Bundle\DynamicQueryBundle\Entity\DataModelGroup, SonataAdminBundle:CRUD]
        tags:
            - { name: sonata.admin, manager_type: orm, group: techpromux_dynamic_queries_admin, label: DataModelGroup, show_in_dashboard: false }

    techpromux_dynamic_query.admin.datamodel_condition:
        class: TechPromux\Bundle\DynamicQueryBundle\Admin\DataModelConditionAdmin
        arguments: [~, TechPromux\Bundle\DynamicQueryBundle\Entity\DataModelCondition, SonataAdminBundle:CRUD]
        tags:
            - { name: sonata.admin, manager_type: orm, group: techpromux_dynamic_queries_admin, label: DataModelCondition, show_in_dashboard: false }

    techpromux_dynamic_query.admin.datamodel_order:
        class: TechPromux\Bundle\DynamicQueryBundle\Admin\DataModelOrderAdmin
        arguments: [~, TechPromux\Bundle\DynamicQueryBundle\Entity\DataModelOrder, SonataAdminBundle:CRUD]
        tags:
            - { name: sonata.admin, manager_type: orm, group: techpromux_dynamic_queries_admin, label: DataModel, show_in_dashboard: false }

