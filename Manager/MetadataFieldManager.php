<?php
/**
 * Created by PhpStorm.
 * User: franklin
 * Date: 27/05/2017
 * Time: 01:01
 */

namespace TechPromux\Bundle\DynamicQueryBundle\Manager;

use TechPromux\Bundle\BaseBundle\Manager\Resource\BaseResourceManager;
use TechPromux\Bundle\DynamicQueryBundle\Entity\Metadata;
use TechPromux\Bundle\DynamicQueryBundle\Entity\MetadataField;

class MetadataFieldManager extends BaseResourceManager
{

    /**
     *
     * @return string
     */
    public function getBundleName()
    {
        return 'TechPromuxDynamicQueryBundle';
    }

    /**
     * Obtiene la clase de la entidad
     *
     * @return class
     */
    public function getResourceClass()
    {
        return MetadataField::class;
    }

    /**
     * Obtiene el nombre corto de la entidad
     *
     * @return string
     */
    public function getResourceName()
    {
        return 'MetadataField';
    }

    //--------------------------------------------------------------------------------------

    /**
     * @var MetadataManager
     */
    protected $metadata_manager;

    /**
     * @return MetadataManager
     */
    public function getMetadataManager()
    {
        return $this->metadata_manager;
    }

    /**
     * @param MetadataManager $metadata_manager
     * @return DataModelManager
     */
    public function setMetadataManager($metadata_manager)
    {
        $this->metadata_manager = $metadata_manager;
        return $this;
    }

    //---------------------------------------------------------------------------------------------


    public function createQueryBuilderForMetadataAndEnabledsSelection(Metadata $metadata, array $criteria = null, array $orderBy = null, $limit = null, $offset = null, $class = null)
    {
        $qb = $this->createQueryBuilder($criteria, $orderBy, $limit, $offset, $class); // TODO: Change the autogenerated stub

        $qb->leftJoin($qb->getRootAliases()[0] . '.metadata', 'm');
        $qb->leftJoin($qb->getRootAliases()[0] . '.table', 't');
        $qb->andWhere($qb->expr()->eq('m.id', '\'' . $metadata->getId() . '\''));
        $qb->andWhere($qb->expr()->eq($qb->getRootAliases()[0] . '.enabled', true));
        $qb->addOrderBy('t.position', 'ASC');
        $qb->addOrderBy($qb->getRootAliases()[0] . '.title', 'ASC');

        return $qb;
    }
}