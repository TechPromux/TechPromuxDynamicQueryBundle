<?php

namespace TechPromux\Bundle\DynamicQueryBundle\Admin;

use Sonata\AdminBundle\Admin\Admin;
use Sonata\AdminBundle\Datagrid\DatagridMapper;
use Sonata\AdminBundle\Datagrid\ListMapper;
use Sonata\AdminBundle\Form\FormMapper;
use Sonata\AdminBundle\Show\ShowMapper;
use TechPromux\Bundle\BaseBundle\Admin\Resource\BaseResourceAdmin;
use TechPromux\Bundle\DynamicQueryBundle\Entity\MetadataTable;
use TechPromux\Bundle\DynamicQueryBundle\Manager\MetadataManager;
use TechPromux\Bundle\DynamicQueryBundle\Manager\MetadataTableManager;

class MetadataTableAdmin extends BaseResourceAdmin
{


    /**
     *
     * @return string
     */
    public function getResourceManagerID()
    {
        return 'techpromux_dynamic_query.manager.metadata_table';
    }

    /**
     *
     * @return MetadataTableManager
     */
    public function getResourceManager()
    {
        return parent::getResourceManager(); // TODO: Change the autogenerated stub
    }

    //------------------------------------------------------------

    protected function configureRoutes(\Sonata\AdminBundle\Route\RouteCollection $collection)
    {
        parent::configureRoutes($collection);
        $collection->clearExcept(array('create', 'edit', 'delete'));
    }

    /**
     * @param FormMapper $formMapper
     */
    protected function configureFormFields(FormMapper $formMapper)
    {

        parent::configureFormFields($formMapper);

        $object = $this->getSubject();

        $metadata = $this->getParentFieldDescription()->getAdmin()->getSubject();

        $tables_names = $this->getResourceManager()->getTableNamesChoices($metadata);

        $table_name_first = array_keys($tables_names)[0];

        if ($object != null && $object->getId() == null && $object->getType() == null) {
            $object->setType('table');
            $object->setTableName($table_name_first);
            $object->setTitle($table_name_first); // poner en camel case, en el javascript?
        }

        $formMapper
            ->add('position', 'hidden', array(
                'attr' => array('data-ctype' => 'metadata-table-position',
                )
            ));

        $formMapper
            ->add('type', 'sonata_type_choice_field_mask',
                array(
                    "choices" => $this->getResourceManager()->getMetadataManager()->getDynamicQueryUtilManager()->getMetadataTableTypesChoices(),
                    'map' => array(
                        'table' => array('tableName', 'title'),
                        'query' => array('customQuery'),
                    ),
                    "expanded" => false,
                    "multiple" => false,
                    'required' => true,
                    'attr' => array('data-ctype' => 'metadata-table-type'),
                    'translation_domain' => $this->getResourceManager()->getBundleName()
                )
            );
        $formMapper
            ->add('tableName', 'choice', array(
                    "choices" => $tables_names,
                    "expanded" => false,
                    "multiple" => false,
                    'required' => false,
                    'attr' => array(
                        'style' => 'width: 100%',
                        'data-ctype' => 'metadata-table-name',
                        'data-last-value' => ($object == null || $object->getType() == 'query') ? $table_name_first : $object->getTableName()
                    ),
                   // 'translation_domain' => $this->getResourceManager()->getBundleName()
                )
            );

        $formMapper
            ->add('customQuery', null, array(
                    'required' => false,
                    'attr' => array(
                        'style' => 'width: 100%',
                        'data-ctype' => 'metadata-table-query'
                    )
                )
            );

        $formMapper
            ->add('title', null, array(
                    'required' => true,
                    'attr' => array('data-ctype' => 'metadata-table-title')
                )
            );

    }

    public function validate(\Sonata\CoreBundle\Validator\ErrorElement $errorElement, $object)
    {

        parent::validate($errorElement, $object);

        /* @var $object MetadataTable */
        $errorElement
            ->with('title')
            ->assertNotBlank()
            ->assertLength(array('min' => 1))
            ->end();

        if ($object->getType() == 'table') {
            $errorElement
                ->with('tableName')
                ->assertNotNull()
                ->end();
        } else if ($object->getType() == 'query') {
            $errorElement
                ->with('customQuery')
                ->assertNotBlank()
                ->assertLength(array('min' => 15))
                ->end();

            if (!empty($object->getCustomQuery()) && strlen($object->getCustomQuery()) >= 15) {
                $metadata = $this->getMetadataManager()->findById($this->getRequest()->get('childId') ?: $this->getRequest()->get('objectId'));
                $object->setMetadata($metadata);
                $col_count = $this->getMetadataManager()->verifyCustomQueryFromMetadataTable($object);
                if (!$col_count || $col_count == 0) {
                    $errorElement->with('customQuery')->addViolation('Error occurs trying to execute SQL DataModel. You must to verify it.')->end();
                }
            }
        }
    }

}
