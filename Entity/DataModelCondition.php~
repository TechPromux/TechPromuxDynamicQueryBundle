<?php

namespace TechPromux\Bundle\DynamicQueryBundle\Entity;

use Doctrine\ORM\Mapping as ORM;
use TechPromux\Bundle\BaseBundle\Entity\Resource\BaseResource;

/**
 * DataModelCondition
 *
 * @ORM\Table(name="techpromux_dynamic_query_datamodel_condition")
 * @ORM\Entity()
 */
class DataModelCondition extends BaseResource
{
    /**
     * @ORM\ManyToOne(targetEntity="DataModel", inversedBy="conditions")
     * @ORM\JoinColumn(name="datamodel_id", referencedColumnName="id", nullable=false)
     */
    private $datamodel;

    /**
     * @ORM\ManyToOne(targetEntity="MetadataField", inversedBy="conditions")
     * @ORM\JoinColumn(name="field_id", referencedColumnName="id", nullable=false)
     */
    private $field;

    /**
     * @var string
     *
     * @ORM\Column(name="function", type="string", length=255)
     */
    private $function;

    /**
     * @var string
     *
     * @ORM\Column(name="operator", type="string", length=255)
     */
    private $operator;

    /**
     * @var string
     *
     * @ORM\Column(name="compare_to_type", type="string", length=255)
     */
    private $compareToType;

    /**
     * @var string
     *
     * @ORM\Column(name="compare_to_fixed_value", type="text")
     */
    private $compareToFixedValue;

    /**
     * @var string
     *
     * @ORM\Column(name="compare_to_dynamic_value", type="string", length=255)
     */
    private $compareToDynamicValue;

    /**
     * @ORM\ManyToOne(targetEntity="MetadataField")
     * @ORM\JoinColumn(name="compare_to_field_id", referencedColumnName="id", nullable=true, onDelete="SET NULL")
     */
    private $compareToField;

    /**
     * @var string
     *
     * @ORM\Column(name="compare_to_field_function", type="string", length=255)
     */
    private $compareToFunction;

    /**
     * @var string
     *
     * @ORM\Column(name="sql_name", type="string", length=255, nullable=true)
     */
    private $sqlName;

    /**
     * @var int
     *
     * @ORM\Column(name="position", type="integer")
     */
    private $position;


    //-------------------------------------------------------------------------


    public function __toString()
    {
        return $this->getName() ?: '';
    }

    //---------------------------------------------------------------------------


}
